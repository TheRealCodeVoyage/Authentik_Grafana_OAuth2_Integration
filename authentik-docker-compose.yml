---

services:
  postgresql:
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - database:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${PG_PASS:?database password required}
      POSTGRES_USER: ${PG_USER:-authentik}
      POSTGRES_DB: ${PG_DB:-authentik}
    env_file:
      - .env
    networks:
      - frontend
  redis:
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - redis:/data
    networks:
      - frontend
  server:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.0}
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    volumes:
      - ./media:/media
      - ./custom-templates:/templates
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=frontend"
      
      # HTTP Router (Handles Redirections)
      - "traefik.http.routers.authentik-http.rule=Host(`auth.c0d3v0y463.com`)"
      - "traefik.http.routers.authentik-http.service=authentik-http-service"
      - "traefik.http.routers.authentik-http.entrypoints=web"
      - "traefik.http.services.authentik-http-service.loadbalancer.server.port=9000"
      - "traefik.http.services.authentik-http-service.loadbalancer.healthcheck.path=/outpost.goauthentik.io/ping"
      - "traefik.http.services.authentik-http-service.loadbalancer.healthcheck.port=9000"

      # HTTPS Router (TLS via Cloudflare)
      - "traefik.http.routers.authentik-https.tls=true"
      - "traefik.http.routers.authentik-https.rule=Host(`auth.c0d3v0y463.com`)"
      - "traefik.http.routers.authentik-https.entrypoints=websecure"
      - "traefik.http.routers.authentik-https.tls.certresolver=cloudflare"
      - "traefik.http.routers.authentik-https.service=authentik-https-service"
      - "traefik.http.services.authentik-https-service.loadbalancer.server.port=9000"
    networks:
      - frontend
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
  worker:
    image: ${AUTHENTIK_IMAGE:-ghcr.io/goauthentik/server}:${AUTHENTIK_TAG:-2025.2.0}
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: redis
      AUTHENTIK_POSTGRESQL__HOST: postgresql
      AUTHENTIK_POSTGRESQL__USER: ${PG_USER:-authentik}
      AUTHENTIK_POSTGRESQL__NAME: ${PG_DB:-authentik}
      AUTHENTIK_POSTGRESQL__PASSWORD: ${PG_PASS}
    user: root
    volumes:
      - /run/docker.sock:/run/docker.sock
      - ./media:/media
      - ./certs:/certs
      - ./custom-templates:/templates
    env_file:
      - .env
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - frontend

volumes:
  database:
    driver: local
  redis:
    driver: local

networks:
  frontend:
    external: true